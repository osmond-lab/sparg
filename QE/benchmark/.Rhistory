t <- 1:length_of_simulation
timeseries_positions <- data.frame("i"="t1", t, x, y)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"x"] <- tail(timeseries_positions$x, 1)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"y"] <- tail(timeseries_positions$y, 1)
ggplot() +
geom_path(data=timeseries_positions, aes(x, y), color="grey") +
theme_void() +
coord_fixed()
for (indiv in 2:number_of_indivs) {
coalescent_events <- mrcas_time %>%
filter(i1==paste0("t",indiv), i2 %in% paste0("t", 1:indiv-1))
current_shallowest_coalescent_time <- round(max(coalescent_events$rescaled_depth))+1
current_shallowest_coalescent_partner <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"i2"][1]
current_shallowest_coalescent_ancestor <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"node"][1]
old_positions <- timeseries_positions %>%
filter(i==current_shallowest_coalescent_partner, t<current_shallowest_coalescent_time) %>%
mutate(i=paste0("t",indiv))
if (current_shallowest_coalescent_time > 1) {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- tail(old_positions$x, 1)
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- tail(old_positions$y, 1)
} else {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- 0
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- 0
}
x_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
x <- cumsum(x_dis)
y_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
y <- cumsum(y_dis)
if (current_shallowest_coalescent_time > 1) {
x <- x + tail(old_positions$x, 1)
y <- y + tail(old_positions$y, 1)
}
t <- current_shallowest_coalescent_time:length_of_simulation
new_positions <- data.frame("i"=paste0("t",indiv), t, "x"=x, "y"=y)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"x"] <- tail(new_positions$x, 1)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"y"] <- tail(new_positions$y, 1)
working_positions <- rbind(old_positions, new_positions)
timeseries_positions <- rbind(timeseries_positions, working_positions)
}
actual_node_positions <- mrcas_time[,c("node", "rescaled_depth", "x", "y")] %>% unique()
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, color=i)) +
geom_text(data=actual_node_positions[which(actual_node_positions$node<=number_of_indivs),], aes(x, y, label=node)) +
theme_void() +
coord_fixed() +
theme(legend.position="none")
tip_node_reference <- mrcas_time[which(mrcas_time$i1==mrcas_time$i2),c("i1", "node", "x", "y")]
predicted_node_positions <- merge(actual_node_positions[,c("node", "rescaled_depth")], tip_node_reference, by="node", all.x=TRUE) %>%
select("node", "x", "y")
node_connections <- as.data.frame(random_tree$edge)
for (node in unique(sort(node_connections$V1, decreasing=TRUE))) {
children <- node_connections[which(node_connections$V1==node),"V2"]
predicted_node_positions[which(predicted_node_positions$node==node),"x"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "x"])
predicted_node_positions[which(predicted_node_positions$node==node),"y"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "y"])
}
combined_node_positions <- merge(actual_node_positions, predicted_node_positions, by="node", suffixes=c(".actual", ".predicted")) %>%
select(-"rescaled_depth")
tree_node_positions <- merge(node_connections, combined_node_positions, by.x="V1", by.y="node")
tree_node_positions <- merge(tree_node_positions, combined_node_positions, by.x="V2", by.y="node", suffixes=c(".V1", ".V2"))
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, group=i), color="grey") +
geom_segment(data=tree_node_positions, aes(x=x.actual.V1, y=y.actual.V1, xend=x.actual.V2, yend=y.actual.V2)) +
geom_segment(data=tree_node_positions, aes(x=x.predicted.V1, y=y.predicted.V1, xend=x.predicted.V2, yend=y.predicted.V2), color="red") +
geom_text(data=combined_node_positions, aes(x.actual, y.actual, label=node)) +
geom_text(data=combined_node_positions, aes(x.predicted, y.predicted, label=node), color="red") +
theme_void() +
coord_fixed()
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, group=i), color="grey") +
geom_segment(data=combined_node_positions, aes(x=x.actual, y=y.actual, xend=x.predicted, yend=y.predicted)) +
geom_text(data=combined_node_positions, aes(x.actual, y.actual, label=node)) +
geom_text(data=combined_node_positions, aes(x.predicted, y.predicted, label=node), color="red") +
theme_void() +
coord_fixed()
calculate_variance <- function(t, df) {
return(var(df[which(df$t==t),]$x))
}
variance_overtime <- data.frame("t"=1:500, "v"=sapply(1:500, FUN=calculate_variance, df=timeseries_positions))
ggplot() +
geom_path(data=variance_overtime, aes(t, v))
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-y, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test.jpg", bm, width=500, height=1000, units="px")
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-x, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-x, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
xlim(-20, 30) +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-y, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
xlim(-20, 30) +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
node_depths <- c(10,10,10,0,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(1, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(10,10,10,1,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(1, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(11,11,11,1,5.5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(1, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(11,11,11,1,6) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(1, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
x_dis <- rnorm(length_of_simulation, 0, 1)
x <- cumsum(x_dis)
y_dis <- rnorm(length_of_simulation, 0, 1)
y <- cumsum(y_dis)
t <- 1:length_of_simulation
timeseries_positions <- data.frame("i"="t1", t, x, y)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"x"] <- tail(timeseries_positions$x, 1)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"y"] <- tail(timeseries_positions$y, 1)
ggplot() +
geom_path(data=timeseries_positions, aes(x, y), color="grey") +
theme_void() +
coord_fixed()
for (indiv in 2:number_of_indivs) {
coalescent_events <- mrcas_time %>%
filter(i1==paste0("t",indiv), i2 %in% paste0("t", 1:indiv-1))
current_shallowest_coalescent_time <- round(max(coalescent_events$rescaled_depth))+1
current_shallowest_coalescent_partner <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"i2"][1]
current_shallowest_coalescent_ancestor <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"node"][1]
old_positions <- timeseries_positions %>%
filter(i==current_shallowest_coalescent_partner, t<current_shallowest_coalescent_time) %>%
mutate(i=paste0("t",indiv))
if (current_shallowest_coalescent_time > 1) {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- tail(old_positions$x, 1)
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- tail(old_positions$y, 1)
} else {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- 0
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- 0
}
x_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
x <- cumsum(x_dis)
y_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
y <- cumsum(y_dis)
if (current_shallowest_coalescent_time > 1) {
x <- x + tail(old_positions$x, 1)
y <- y + tail(old_positions$y, 1)
}
t <- current_shallowest_coalescent_time:length_of_simulation
new_positions <- data.frame("i"=paste0("t",indiv), t, "x"=x, "y"=y)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"x"] <- tail(new_positions$x, 1)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"y"] <- tail(new_positions$y, 1)
working_positions <- rbind(old_positions, new_positions)
timeseries_positions <- rbind(timeseries_positions, working_positions)
}
actual_node_positions <- mrcas_time[,c("node", "rescaled_depth", "x", "y")] %>% unique()
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, color=i)) +
geom_text(data=actual_node_positions[which(actual_node_positions$node<=number_of_indivs),], aes(x, y, label=node)) +
theme_void() +
coord_fixed() +
theme(legend.position="none")
tip_node_reference <- mrcas_time[which(mrcas_time$i1==mrcas_time$i2),c("i1", "node", "x", "y")]
predicted_node_positions <- merge(actual_node_positions[,c("node", "rescaled_depth")], tip_node_reference, by="node", all.x=TRUE) %>%
select("node", "x", "y")
node_connections <- as.data.frame(random_tree$edge)
for (node in unique(sort(node_connections$V1, decreasing=TRUE))) {
children <- node_connections[which(node_connections$V1==node),"V2"]
predicted_node_positions[which(predicted_node_positions$node==node),"x"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "x"])
predicted_node_positions[which(predicted_node_positions$node==node),"y"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "y"])
}
combined_node_positions <- merge(actual_node_positions, predicted_node_positions, by="node", suffixes=c(".actual", ".predicted")) %>%
select(-"rescaled_depth")
tree_node_positions <- merge(node_connections, combined_node_positions, by.x="V1", by.y="node")
tree_node_positions <- merge(tree_node_positions, combined_node_positions, by.x="V2", by.y="node", suffixes=c(".V1", ".V2"))
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, group=i), color="grey") +
geom_segment(data=tree_node_positions, aes(x=x.actual.V1, y=y.actual.V1, xend=x.actual.V2, yend=y.actual.V2)) +
geom_segment(data=tree_node_positions, aes(x=x.predicted.V1, y=y.predicted.V1, xend=x.predicted.V2, yend=y.predicted.V2), color="red") +
geom_text(data=combined_node_positions, aes(x.actual, y.actual, label=node)) +
geom_text(data=combined_node_positions, aes(x.predicted, y.predicted, label=node), color="red") +
theme_void() +
coord_fixed()
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, group=i), color="grey") +
geom_segment(data=combined_node_positions, aes(x=x.actual, y=y.actual, xend=x.predicted, yend=y.predicted)) +
geom_text(data=combined_node_positions, aes(x.actual, y.actual, label=node)) +
geom_text(data=combined_node_positions, aes(x.predicted, y.predicted, label=node), color="red") +
theme_void() +
coord_fixed()
calculate_variance <- function(t, df) {
return(var(df[which(df$t==t),]$x))
}
variance_overtime <- data.frame("t"=1:500, "v"=sapply(1:500, FUN=calculate_variance, df=timeseries_positions))
ggplot() +
geom_path(data=variance_overtime, aes(t, v))
calculate_variance <- function(t, df) {
return(var(df[which(df$t==t),]$x))
}
variance_overtime <- data.frame("t"=0:500, "v"=sapply(1:500, FUN=calculate_variance, df=timeseries_positions))
calculate_variance <- function(t, df) {
return(var(df[which(df$t==t),]$x))
}
variance_overtime <- data.frame("t"=1:500, "v"=sapply(1:500, FUN=calculate_variance, df=timeseries_positions))
ggplot() +
geom_path(data=variance_overtime, aes(t, v))
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-y, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
xlim(-20, 30) +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
node_depths <- c(10,10,10,1,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(0, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(10,10,10,0.1,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(0, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(10,10,10,0.01,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(0, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
node_depths <- c(10,10,10,0.02,5) #node.depth.edgelength(random_tree)
node_depths <- data.frame("node"=1:length(node_depths), "depth"=node_depths)
node_depths$rescaled_depth <- scales::rescale(node_depths$depth, from=c(0, max(node_depths$depth)))*length_of_simulation
mrcas <- as.data.frame(mrca(random_tree, full = FALSE))
mrcas_time <- mrcas %>%
rownames_to_column(var="i1") %>%
gather(i2, node, -i1) %>%
left_join(node_depths, by="node") %>%
mutate(x=NA, y=NA)
mrcas_time[,c("node", "rescaled_depth")] %>% unique() %>% arrange(node) #%>% gt()
x_dis <- rnorm(length_of_simulation, 0, 1)
x <- cumsum(x_dis)
y_dis <- rnorm(length_of_simulation, 0, 1)
y <- cumsum(y_dis)
t <- 1:length_of_simulation
timeseries_positions <- data.frame("i"="t1", t, x, y)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"x"] <- tail(timeseries_positions$x, 1)
mrcas_time[which(mrcas_time$i1=="t1" & mrcas_time$i2=="t1"),"y"] <- tail(timeseries_positions$y, 1)
ggplot() +
geom_path(data=timeseries_positions, aes(x, y), color="grey") +
theme_void() +
coord_fixed()
for (indiv in 2:number_of_indivs) {
coalescent_events <- mrcas_time %>%
filter(i1==paste0("t",indiv), i2 %in% paste0("t", 1:indiv-1))
current_shallowest_coalescent_time <- round(max(coalescent_events$rescaled_depth))+1
current_shallowest_coalescent_partner <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"i2"][1]
current_shallowest_coalescent_ancestor <- coalescent_events[which(coalescent_events$rescaled_depth==max(coalescent_events$rescaled_depth)),"node"][1]
old_positions <- timeseries_positions %>%
filter(i==current_shallowest_coalescent_partner, t<current_shallowest_coalescent_time) %>%
mutate(i=paste0("t",indiv))
if (current_shallowest_coalescent_time > 1) {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- tail(old_positions$x, 1)
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- tail(old_positions$y, 1)
} else {
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"x"] <- 0
mrcas_time[which(mrcas_time$node==current_shallowest_coalescent_ancestor),"y"] <- 0
}
x_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
x <- cumsum(x_dis)
y_dis <- rnorm(length_of_simulation-(current_shallowest_coalescent_time-1), 0, 1)
y <- cumsum(y_dis)
if (current_shallowest_coalescent_time > 1) {
x <- x + tail(old_positions$x, 1)
y <- y + tail(old_positions$y, 1)
}
t <- current_shallowest_coalescent_time:length_of_simulation
new_positions <- data.frame("i"=paste0("t",indiv), t, "x"=x, "y"=y)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"x"] <- tail(new_positions$x, 1)
mrcas_time[which(mrcas_time$i1==paste0("t",indiv) & mrcas_time$i2==paste0("t",indiv)),"y"] <- tail(new_positions$y, 1)
working_positions <- rbind(old_positions, new_positions)
timeseries_positions <- rbind(timeseries_positions, working_positions)
}
actual_node_positions <- mrcas_time[,c("node", "rescaled_depth", "x", "y")] %>% unique()
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, color=i)) +
geom_text(data=actual_node_positions[which(actual_node_positions$node<=number_of_indivs),], aes(x, y, label=node)) +
theme_void() +
coord_fixed() +
theme(legend.position="none")
tip_node_reference <- mrcas_time[which(mrcas_time$i1==mrcas_time$i2),c("i1", "node", "x", "y")]
predicted_node_positions <- merge(actual_node_positions[,c("node", "rescaled_depth")], tip_node_reference, by="node", all.x=TRUE) %>%
select("node", "x", "y")
node_connections <- as.data.frame(random_tree$edge)
for (node in unique(sort(node_connections$V1, decreasing=TRUE))) {
children <- node_connections[which(node_connections$V1==node),"V2"]
predicted_node_positions[which(predicted_node_positions$node==node),"x"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "x"])
predicted_node_positions[which(predicted_node_positions$node==node),"y"] <- mean(predicted_node_positions[which(predicted_node_positions$node %in% children), "y"])
}
combined_node_positions <- merge(actual_node_positions, predicted_node_positions, by="node", suffixes=c(".actual", ".predicted")) %>%
select(-"rescaled_depth")
tree_node_positions <- merge(node_connections, combined_node_positions, by.x="V1", by.y="node")
tree_node_positions <- merge(tree_node_positions, combined_node_positions, by.x="V2", by.y="node", suffixes=c(".V1", ".V2"))
ggplot() +
geom_path(data=timeseries_positions, aes(x, y, group=i), color="grey") +
geom_segment(data=combined_node_positions, aes(x=x.actual, y=y.actual, xend=x.predicted, yend=y.predicted)) +
geom_text(data=combined_node_positions, aes(x.actual, y.actual, label=node)) +
geom_text(data=combined_node_positions, aes(x.predicted, y.predicted, label=node), color="red") +
theme_void() +
coord_fixed()
calculate_variance <- function(t, df) {
return(var(df[which(df$t==t),]$x))
}
variance_overtime <- data.frame("t"=1:500, "v"=sapply(1:500, FUN=calculate_variance, df=timeseries_positions))
ggplot() +
geom_path(data=variance_overtime, aes(t, v))
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-y, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
xlim(-20, 30) +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
group.colors <- c(t3 = "#29ADFF", t1 = "#FFA300", t2 ="#FF004D")
bm <- ggplot() +
geom_path(data=timeseries_positions, aes(-y, 500-t, group=i, color=i), show.legend = FALSE) +
ylab("time (generations)") +
xlab("position") +
#xlim(-20, 30) +
scale_color_manual(values=group.colors) +
theme_minimal()
ggsave("test_x.jpg", bm, width=500, height=1000, units="px")
library(ggplot2)
file <- read.csv("benchmarking_final.csv")
setwd("~/Documents/GitHub/sparg2.0/QE/benchmark")
library(ggplot2)
file <- read.csv("benchmarking_final.csv")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Bottom Up"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Bottom Up"), se=F) +
scale_color_manual(values=c("#999999", "#E69F00")) +
#geom_point(aes(paths, minimal_time, color="Minimal"), alpha=0.3) +
#geom_smooth(aes(paths, minimal_time, color="Minimal"), se=F) +
#coord_cartesian(ylim=c(0,0.5)) +
#xlim(min=0, max=1000) +
#ylim(min=0, max=20) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
labs(color="Method") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
labs(color="Methods") +
theme_minimal()
image <- ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
labs(color="Methods") +
theme_minimal()
ggsave(file="benchmark.svg", plot=image, width=10, height=8)
install.packages('svglite')
ggsave(file="benchmark.svg", plot=image, width=10, height=8)
ggsave(file="benchmark.svg", plot=image, width=5, height=5)
image <- ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
#scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
#labs(color="Methods") +
theme_minimal()
image
image <- ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
#labs(color="Methods") +
theme_minimal()
image
image <- ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
#labs(color="Methods") +
theme(legend.position = "none") +
theme_minimal()
image
image <- ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Naive"), alpha=0.5) +
geom_smooth(aes(paths, paths_time, color="Naive"), se=F) +
geom_point(aes(paths, bottom_up_time, color="Optimized"), alpha=0.5) +
geom_smooth(aes(paths, bottom_up_time, color="Optimized"), se=F) +
geom_point(aes(paths, minimal_time, color="Minimal (new)"), alpha=0.3) +
geom_smooth(aes(paths, minimal_time, color="Minimal (new)"), se=F) +
scale_color_manual(breaks=c("Naive", "Optimized", "Minimal (new)"), values=c("#E69F00", "#56B4E9", "#999999")) +
coord_cartesian(ylim=c(0,0.1)) +
#xlim(min=0, max=1000) +
ylim(min=0, max=5) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix (seconds)") +
#labs(color="Methods") +
theme_minimal() +
theme(legend.position = "none")
image
ggsave(file="benchmark.svg", plot=image, width=5, height=5)
