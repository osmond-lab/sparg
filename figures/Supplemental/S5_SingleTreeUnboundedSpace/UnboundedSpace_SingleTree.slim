//adapted from https://pyslim.readthedocs.io/en/latest/vignette_space.html
initialize() {
    defineConstant("SIGMA_disp", 1); 
	 defineConstant("rep",1);
    defineConstant("L",1e6);
    defineConstant("r",1e-4);
    defineConstant("R",2);
    defineConstant("fname", "slim_disp_"+SIGMA_disp+"_nobound_rep"+rep+ "sigma.trees");
    defineConstant("K",1);
    defineConstant("W",1000.0); 
    defineConstant("t",10); 
    defineConstant("N0",1);
	 initializeSLiMModelType("nonWF"); // non Wright Fisher
    initializeSLiMOptions(dimensionality="xy"); // two spatial dimensions
    initializeTreeSeq(retainCoalescentOnly=F); // record the true tree sequence (and keep unary nodes too, for locating ancestors, later)
    initializeMutationRate(0.0); // no mutations (add these with msprime)
    initializeMutationType("m1", 0.5, "f", 0.0); // irrelevant mutation type
    initializeGenomicElementType("g1", m1, 1.0); // irrelevant genome type
    initializeGenomicElement(g1, 0, L-1); // length of chromosome
    initializeRecombinationRate(r); // recombination rate per base
}

reproduction() {
    num_offspring = rpois(1, R); // poisson number of offspring with mean R/(1+n_d/K), ie Beverton-Holt density dependence
    if (size(individual) > 0) { // if there is a mate (possible none within interacting distance, in which case there are no offspring produced)
        for (k in seqLen(num_offspring)) {
            offspring = p1.addCrossed(individual, individual); //make offspring by sexual reproduction
            pos = individual.spatialPosition + rnorm(2, 0, SIGMA_disp); // set position of offspring as random normal in both directions
            offspring.setSpatialPosition(pos); // put offspring in its place
        }
    }
}

1 early() {
    community.rescheduleScriptBlock(s1, start=t, end=t); //set up end of simulation
    sim.addSubpop("p1", N0); //initial popn size
    p1.setSpatialBounds(c(0.0, 0.0, W, W)); //set spatial plane
    p1.individuals.setSpatialPosition(c(W/2,W/2));
}

early() {
    catn(community.tick); 
    p1.fitnessScaling = 1.0;
    inds = sim.subpopulations.individuals;
    inds[inds.age > 0].fitnessScaling = 0.0; // remove adults (ie enforce discrete generations)
}

late() {
    sim.treeSeqRememberIndividuals(p1.individuals, permanent=F); //remember individuals only if ancestors of final population
}

s1 late () {
    sim.treeSeqOutput(fname); //output treesequence
    catn("Done: Disp "+SIGMA_disp);
    sim.simulationFinished();
}
