data=data.frame("position"=1:(dimension**2), "betweenness"=betweenness(lat)),
aes(
x=(position-1)%%dimension,
y=dimension-(position-1)%/%dimension,
label=position#,
#color=betweenness
)
) +
theme_void() +
coord_fixed()
maze
library(igraph)
library(tidyverse)
# build the maze
dimension <- 2
lat <- make_lattice(dimvector=c(dimension, dimension))
all_edges <- as.data.frame(as_edgelist(graph=lat))
lat <- delete_edges(graph=lat, edges=1:nrow(all_edges))
selected_edges <- data.frame(V1=c(), V2=c())
visited <- c()
current_node <- 1
while(length(visited)<(dimension**2)) {
if (!(current_node %in% visited)) {
visited <- c(visited, current_node)
}
node_edges <- all_edges[which(all_edges$V1==current_node|all_edges$V2==current_node),]
node_edges$other_node <- rowSums(node_edges) - current_node
possible_edges <- node_edges[which(!(node_edges$other_node %in% visited)),]
if (nrow(possible_edges) > 0) {
selected_edge <- possible_edges[sample(x=rownames(possible_edges), size=1),]
selected_edges <- rbind(selected_edges, selected_edge[, c("V1", "V2")])
current_node <- selected_edge$other_node
} else {
current_node <- sample(x=visited, size=1)
}
}
selected_edges <- as.vector(t(selected_edges))
lat <- add_edges(graph=lat, edges=selected_edges)
#plot(lat, vertex.size=0, vertex.label=NA)
# view maze
determine_wall_positions <- function(nce) {
if (nce["V2"] == nce["V1"] + 1) {
xstart = (nce["V1"]-1)%%dimension + 0.5
xend = (nce["V1"]-1)%%dimension + 0.5
ystart = dimension-(nce["V1"]-1)%/%dimension + 0.5
yend = dimension-(nce["V1"]-1)%/%dimension - 0.5
} else {
xstart = (nce["V1"]-1)%%dimension - 0.5
xend = (nce["V1"]-1)%%dimension + 0.5
ystart = dimension-(nce["V1"]-1)%/%dimension - 0.5
yend = dimension-(nce["V1"]-1)%/%dimension - 0.5
}
return(data.frame("xstart"=xstart,"xend"=xend,"ystart"=ystart,"yend"=yend))
}
connected_edges <- as.data.frame(as_edgelist(graph=lat))
nonconnected_edges <- anti_join(all_edges, connected_edges, by=c("V1", "V2"))
wall_positions <- do.call("rbind", apply(nonconnected_edges, MARGIN=1, FUN=determine_wall_positions))
maze <- ggplot() +
geom_segment(
data=data.frame("xstart"=c(-0.5,dimension-0.5,dimension-0.5,-0.5), "xend"=c(dimension-0.5,dimension-0.5,-0.5,-0.5), "ystart"=c(0.5,0.5,dimension+0.5,dimension+0.5), "yend"=c(0.5,dimension+0.5,dimension+0.5,0.5)),
aes(
x=xstart,
xend=xend,
y=ystart,
yend=yend
)
) +
geom_segment(
data=wall_positions,
aes(
x=xstart,
xend=xend,
y=ystart,
yend=yend
)
) +
geom_text(
data=data.frame("position"=1:(dimension**2), "betweenness"=betweenness(lat)),
aes(
x=(position-1)%%dimension,
y=dimension-(position-1)%/%dimension,
label=position#,
#color=betweenness
)
) +
theme_void() +
coord_fixed()
maze
betweenness(lat)
(2* (betweenness(lat) + dimension)) / (dimension**2)
(2* (betweenness(lat) + dimension**2)) / ((dimension**2)**2)
betweenness(lat) + (dimension**2)
2(betweenness(lat) + (dimension**2))
2*(betweenness(lat) + (dimension**2))
2*(betweenness(lat) + (dimension**2))-1
(2 * (betweenness(lat) + dimension**2) - 1) / ((dimension**2)**2)
determine_winner <- function(mouse, graph, traps) {
mouse_path <- shortest_paths(graph=graph, from=mouse["start"], to=mouse["stop"])$vpath[[1]]
steps <- match(traps, mouse_path)
if (all(is.na(steps))) {
return(NA)
} else {
return(match(min(steps, na.rm=TRUE), steps))
}
}
p1_trap_position <- 1
p2_trap_position <- 16
mice <- data.frame(
start=sample(x=1:(dimension**2), size=10000, replace=TRUE),
stop=sample(x=1:(dimension**2), size=10000, replace=TRUE)
)
mice$winner <- apply(mice, MARGIN=1, FUN=determine_winner, graph=lat, traps=c(p1_trap_position))
table(mice$winner)
test.file<-"/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt.gz"
test_data<-read.table(test.file,as.is=TRUE)
View(test_data)
superpops<-read.table("/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/params/poplists/superpops_panel.txt",as.is=TRUE)
these.rows<-which(nchar(test_data[,1])==5)
print(sum(test_data[,2])-sum(test_data[these.rows,2]))
split.key<-sapply(test_data[these.rows,1],function(a){strsplit(as.character(a),"")[[1]]})
split.key<-apply(split.key,2,as.numeric)
split.key<-as.data.frame(t(split.key))
colnames(split.key)<-c(as.character(superpops$V1))
polymorphic<-test_data[these.rows, ]
cutoff<-2
poly.Afr<-sum(polymorphic[split.key$AFR >=cutoff,2] )
poly.Eur<-sum(polymorphic[split.key$EUR >=cutoff,2] )
poly.Eas<-sum(polymorphic[split.key$EAS >=cutoff,2] )
poly.All<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
#only.Afr<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR !=2 & split.key$EAS !=2,2])
#only.Eur<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR ==2 & split.key$EAS !=2,2])
#only.Eas<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR !=2 & split.key$EAS ==2,2])
poly.Afr.Eur<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff ,2])
poly.Afr.Eas<-sum(polymorphic[split.key$AFR >=cutoff &  split.key$EAS >=cutoff,2])
poly.Eur.Eas<-sum(polymorphic[ split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
grid.newpage()
overrideTriple=TRUE;draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
install.packages("eulerr")
library(eulerr)
overrideTriple=TRUE;draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
install.packages("VennDiagram")
library(VennDiagram)
overrideTriple=TRUE;
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
warnings()
# https://github.com/aabiddanda/geodist_analysis_final/tree/master/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05
#test.file<-"/Users/gcoop/Downloads/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt_Han.txt.gz"
#YRi/YRI
#test.file<-"/Users/gcoop/Downloads/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt"
#superpops<-read.table("/Users/gcoop/Downloads/superpops_panel.txt",as.is=TRUE)
test.file<-"/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt.gz"
superpops<-read.table("/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/params/poplists/superpops_panel.txt",as.is=TRUE)
test_data<-read.table(test.file,as.is=TRUE)
##total not found
these.rows<-which(nchar(test_data[,1])==5)
print(sum(test_data[,2])-sum(test_data[these.rows,2]))
split.key<-sapply(test_data[these.rows,1],function(a){strsplit(as.character(a),"")[[1]]})
split.key<-apply(split.key,2,as.numeric)
split.key<-as.data.frame(t(split.key))
colnames(split.key)<-c(as.character(superpops$V1))
polymorphic<-test_data[these.rows, ]
cutoff<-2
poly.Afr<-sum(polymorphic[split.key$AFR >=cutoff,2] )
poly.Eur<-sum(polymorphic[split.key$EUR >=cutoff,2] )
poly.Eas<-sum(polymorphic[split.key$EAS >=cutoff,2] )
poly.All<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
#only.Afr<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR !=2 & split.key$EAS !=2,2])
#only.Eur<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR ==2 & split.key$EAS !=2,2])
#only.Eas<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR !=2 & split.key$EAS ==2,2])
poly.Afr.Eur<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff ,2])
poly.Afr.Eas<-sum(polymorphic[split.key$AFR >=cutoff &  split.key$EAS >=cutoff,2])
poly.Eur.Eas<-sum(polymorphic[ split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
grid.newpage()
library(eulerr)
library(VennDiagram)
overrideTriple=TRUE;
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
View(test_data)
View(superpops)
library("devtools")
devtools::install_github("jgroh/gnomwav")
gnomwav
library(gnomwav)
library(tidyverse)
library(ggplot2)
benchmark <- read.csv("/Users/jameskitchens/Downloads/benchmarking_new.csv")
View(benchmark)
ggplot(data=benchmark) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_path(aes(num_samples, paths_time), color="red") +
geom_point(aes(num_samples, hybrid_r_time), color="blue") +
geom_point(aes(num_samples, hybrid_nr_time), color="black") +
geom_label(aes(num_samples, 500, label=algo_order)) +
geom_label(aes(num_samples, 400, label=paths)) +
ylim(0, 500) +
theme_minimal()
ggplot(data=benchmark) +
geom_path(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
topology <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/topology.csv")
View(topology)
View(topology)
setwd("~/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking")
library(ggplot2)
file <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/benchmarking_with_td.csv", colClasses=c(algo_order="character"))
library(ggplot2)
file <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/benchmarking_with_td.csv", colClasses=c(algo_order="character"))
View(file)
filtered <- file[which(file$paths_sum==file$paths_modified_sum)]
filtered <- file[which(file$paths_sum==file$paths_modified_sum),]
filtered <- file[which(file$paths_sum!=file$paths_modified_sum),]
View(filtered)
filtered$paths_sum
filtered$paths_modified_sum
View(file)
View(file)
file$paths_sum <- int(file$paths_sum)
file$paths_sum <- round(file$paths_sum)
file <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/benchmarking_with_td.csv", colClasses=c(algo_order="character"))
file$paths_sum <- as.integer(file$paths_sum)
View(file)
file <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/benchmarking_with_td.csv", colClasses=c(algo_order="character"))
file$paths_sum <- round(file$paths_sum)
file$paths_modified_sum <- round(file$paths_modified_sum)
filtered <- file[which(file$paths_sum!=file$paths_modified_sum),]
file$hybrid_nr_sum <- round(file$hybrid_nr_sum)
filtered <- file[which(file$paths_sum!=file$hybrid_nr_sum),]
View(filtered)
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(num_trees, paths_time), color="red") +
geom_point(aes(num_trees, hybrid_r_time), color="blue") +
geom_point(aes(num_trees, paths_modified_time), color="black") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(num_trees, paths_time), color="red") +
geom_point(aes(num_trees, hybrid_r_time), color="blue") +
geom_point(aes(num_trees, paths_modified_time), color="black") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, paths_modified_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, paths_modified_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, paths_modified_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", opacity=0.5) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.5) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.2) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black") +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.2) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.2) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black", alpha=0.2) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.3) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black", alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.3) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black", alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
scale_color_manual(name="Methods",
breaks=c("Paths", "Paths (Modified)", "Hybrid (Recursive)"),
values=c("Paths"="red", "Paths (Modified)"="black", "Hybrid (Recursive)"="blue")) +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.3) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), color="black", alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
scale_color_manual(name="Methods",
breaks=c("Paths", "Paths (Modified)", "Hybrid (Recursive)"),
values=c("Paths"="red", "Paths (Modified)"="black", "Hybrid (Recursive)"="blue"))
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.3) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time, color="black"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time), color="red", alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time), color="red", se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time), color="blue", alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time), color="blue", se=F) +
geom_point(aes(paths, paths_modified_time), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time), color="black", se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix")
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
